@startuml
' declate title
title 1.1 DFSP1 sends a Prepare Transfer request to DFSP2

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
actor "Payer" as DFSP1
actor "Payee" as DFSP2
boundary "ML API Adapter" as MLAPI
control "ML API Notification Event Handler" as NOTIFY_HANDLER
boundary "Central Service API" as CSAPI
collections "Prepare-Topic-dfsp1" as TOPIC_PREPARE_DFSP1
control "Prepare Event Handler" as PREP_HANDLER
collections "Position-Topic-dfsp1" as TOPIC_POSITION_DFSP1
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
control "Transfer Event Handler" as TRANS_HANDLER
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
' collections "Errors-Topic" as ERRORS_NOTIFICATIONS
entity "Position DAO" as POS_DAO
entity "Event DAO" as EVENT_DAO
entity "Transfer DAO" as TRANS_DAO
entity "Notification DAO" as NOTIFY_DAO
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Financial Service Providers" #lightGray
	participant DFSP1
	participant DFSP2
end box

box "ML API Adapter Service" #LightBlue
	participant MLAPI
	participant NOTIFY_HANDLER
end box

box "Central Service" #LightYellow
    participant CSAPI
	participant TOPIC_PREPARE_DFSP1
    participant PREP_HANDLER
    participant TOPIC_POSITION_DFSP1
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TRANS_HANDLER
    participant TOPIC_NOTIFICATIONS
    ' participant ERRORS_NOTIFICATIONS
    participant POS_DAO
    participant EVENT_DAO
    participant TRANS_DAO
    participant NOTIFY_DAO
    participant PARTICIPANT_DAO
    participant DB
end box

' start flow
group DFSP1 sends a Prepare Transfer request to Payee
    activate MLAPI
    note right of DFSP1 #yellow
        Headers - transferHeaders: {
            Content-Length: <Content-Length>,
            Content-Type: <Content-Type>,
            Date: <Date>,
            X-Forwarded-For: <X-Forwarded-For>,
            FSPIOP-Source: <FSPIOP-Source>,
            FSPIOP-Destination: <FSPIOP-Destination>,
            FSPIOP-Encryption: <FSPIOP-Encryption>,
            FSPIOP-Signature: <FSPIOP-Signature>,
            FSPIOP-URI: <FSPIOP-URI>,
            FSPIOP-HTTP-Method: <FSPIOP-HTTP-Method>
        }

        Payload - transferMessage:
        {
            "transferId": <uuid>,
            "payeeFsp": dfsp1,
            "payerFsp": dfsp1,
            "amount": {
                "currency": "AED",
                "amount": "string"
            },
            "ilpPacket": "string",
            "condition": "string",
            "expiration": "string",
            "extensionList": {
                "extension": [
                    {
                        "key": "string",
                        "value": "string"
                    }
                ]
            }
        }
    end note
    DFSP1 -> MLAPI: POST - http://transfers
    MLAPI -> MLAPI: validates incoming token, and the originator matches Payer
    note right of MLAPI #yellow
        Message:
        {
            id: <transferMessage.transferId>
            from: <transferMessage.payerFsp>,
            to: <transferMessage.payeeFsp>,
            type: application/json
            content: {
                headers: <transferHeaders>,
                payload: <transferMessage>
            },
            metadata: {
                event: {
                    id: <uuid>,
                    type: prepare,
                    action: prepare,
                    createdAt: <timestamp>,
                    state: {
                        status: "success",
                        code: 0
                    }
                }
            }
        }
    end note
    MLAPI -> TOPIC_PREPARE_DFSP1: Routes & Publishes Prepare event for Payer
    TOPIC_PREPARE_DFSP1 <-> TOPIC_PREPARE_DFSP1: Ensures that event is replicated as configured (ACKS=all)
    TOPIC_PREPARE_DFSP1 -> MLAPI: Responds replication acknoledgements have been received
    MLAPI -> DFSP1: Respond HTTP - 202 (Accepted)
    deactivate MLAPI

    activate PREP_HANDLER
    alt Prepare Handler consume Single Message
        TOPIC_PREPARE_DFSP1 -> PREP_HANDLER: Consumes Prepare event message for Payer
        group Persist Event Information
            PREP_HANDLER -> EVENT_DAO: Request to persist event information
            EVENT_DAO <-> DB: Persist event information
            EVENT_DAO -> PREP_HANDLER: return success
        end
        group Validate Prepare Transfer
            group Validate Payer
                PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payer Participant details (if it exists)
                PARTICIPANT_DAO <-> DB: return Participant details if it exists
                PARTICIPANT_DAO -> PREP_HANDLER: return Participant details if it exists
                PREP_HANDLER <-> PREP_HANDLER: Validates Payer
            end
            group Validate Payee
                PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payee Participant details (if it exists)
                PARTICIPANT_DAO <-> DB: return Participant details if it exists
                PARTICIPANT_DAO -> PREP_HANDLER: return Participant details if it exists
                PREP_HANDLER <-> PREP_HANDLER: Validates Payee
            end
            group Duplicate check
                PREP_HANDLER -> TRANS_DAO: Request to retrieve Transfer (if it exists)
                TRANS_DAO <-> DB: return Transfer if it exists
                TRANS_DAO -> PREP_HANDLER: return Transfer if it exists
                PREP_HANDLER <-> PREP_HANDLER: Validates duplicate Check
            end
            PREP_HANDLER <-> PREP_HANDLER: Validates crypto-condition
            PREP_HANDLER <-> PREP_HANDLER: Validates message signature (to be confirmed in future requirement)
        end
        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: position,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_POSITION_DFSP1: Routes & Publishes Position event for Payer
    else Prepare Handler consume batch Messages
        TOPIC_PREPARE_DFSP1 -> PREP_HANDLER: Consumes Prepare event batch of messages for Payer
        group Persist batch Event Information
            PREP_HANDLER -> EVENT_DAO: Request to persist event information for batch of messages
            EVENT_DAO <-> DB: Persist event batch information
            EVENT_DAO -> PREP_HANDLER: return success
        end

        group Fetch batch Payer information
            PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve batch of Payer Participant details (if it exists)
            PARTICIPANT_DAO <-> DB: return Participant details if it exists
            PARTICIPANT_DAO -> PREP_HANDLER: return Participant details if it exists
            PREP_HANDLER <-> PREP_HANDLER: Validates Payer
            PREP_HANDLER -> PREP_HANDLER: store result set in var: $LIST_PARTICIPANTS_DETAILS_PAYER
        end

        group Fetch batch Payee information
            PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve batch of Payee Participant details (if it exists)
            PARTICIPANT_DAO <-> DB: return Participant details if it exists
            PARTICIPANT_DAO -> PREP_HANDLER: return Participant details if it exists
            PREP_HANDLER <-> PREP_HANDLER: Validates Payee
            PREP_HANDLER -> PREP_HANDLER: store result set in var: $LIST_PARTICIPANTS_DETAILS_PAYEE
        end

        group Fetch batch of transfers
            PREP_HANDLER -> TRANS_DAO: Request to retrieve batch of Transfers (if it exists)
            TRANS_DAO <-> DB: return batch of Transfers (if it exists)
            TRANS_DAO -> PREP_HANDLER: return batch of Transfer (if it exists)
            PREP_HANDLER -> PREP_HANDLER: store result set in var: $LIST_TRANSFERS
        end

        loop for each message in batch
            group Validate Prepare Transfer
                group Validate Payer
                    PREP_HANDLER <-> PREP_HANDLER: Validates Payer against in-memory var $LIST_PARTICIPANTS_DETAILS_PAYER
                end
                group Validate Payee
                    PREP_HANDLER <-> PREP_HANDLER: Validates Payee against in-memory var $LIST_PARTICIPANTS_DETAILS_PAYEE
                end
                group Duplicate check
                    PREP_HANDLER <-> PREP_HANDLER: Validates duplicate Check against in-memory var $LIST_TRANSFERS
                end
                PREP_HANDLER <-> PREP_HANDLER: Validates crypto-condition
                PREP_HANDLER <-> PREP_HANDLER: Validates message signature (to be confirmed in future requirement)
            end
            note right of PREP_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: position,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            PREP_HANDLER -> TOPIC_POSITION_DFSP1: Routes & Publishes Position event for Payer
        end
    end
    deactivate PREP_HANDLER

    activate POS_HANDLER
    alt Position Handler consume Single Message
        TOPIC_POSITION_DFSP1 -> POS_HANDLER: Consumes Position event message for Payer

        group Persist Event Information
            POS_HANDLER -> EVENT_DAO: Request to persist event information
            EVENT_DAO <-> DB: Persist event information
            EVENT_DAO -> POS_HANDLER: return success
        end

        group Persist Prepare Transfer State with transferState='pending'
            POS_HANDLER -> TRANS_DAO: Request to persist transfer
            TRANS_DAO <-> DB: Persist transfer
            TRANS_DAO -> POS_HANDLER: return success
        end

        group Calculate position and persist change
            POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
            POS_DAO <-> DB: Retrieves latest position from DB for Payer
            POS_DAO -> POS_HANDLER: Return latest position

            POS_HANDLER <-> POS_HANDLER: Calculates latest position (lpos) by incrementing transfer for prepare
            POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
            
            POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
            POS_DAO <-> DB: Persists latest position to DB for Payer
            POS_DAO -> POS_HANDLER: return success
        end
        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_TRANSFERS: Publishes Transfer event
    else Position Handler consume batch Messages
        TOPIC_POSITION_DFSP1 -> POS_HANDLER: Consumes Position event batch of messages for Payer

        group Persist batch Event Information
            POS_HANDLER -> EVENT_DAO: Request to persist event information for batch of messages
            EVENT_DAO <-> DB: Persist event batch information
            EVENT_DAO -> POS_HANDLER: return success
        end

        group Persist Prepare Batch Transfer State with transferState='pending'
            POS_HANDLER -> TRANS_DAO: Request to persist batch transfer
            TRANS_DAO <-> DB: Persist batch transfer
            TRANS_DAO -> POS_HANDLER: return success
        end

        loop for each message in batch
            group Calculate position and persist change
                POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
                POS_DAO <-> DB: Retrieves latest position from DB for Payer
                POS_DAO -> POS_HANDLER: Return latest position

                POS_HANDLER <-> POS_HANDLER: Calculates latest position (lpos) by incrementing transfer for prepare
                POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
                
                POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
                POS_DAO <-> DB: Persists latest position to DB for Payer
                POS_DAO -> POS_HANDLER: return success
            end
            note right of POS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: transfer,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            POS_HANDLER -> TOPIC_TRANSFERS: Publishes Transfer event
        end
    end
    deactivate POS_HANDLER

    activate TRANS_HANDLER
    alt Transfer Handler consume Single Message
        TOPIC_TRANSFERS -> TRANS_HANDLER: Consumes Transfer event
        group Persist Event Information
            TRANS_HANDLER -> EVENT_DAO: Request to persist event information
            EVENT_DAO <-> DB: Persist event information
            EVENT_DAO -> TRANS_HANDLER: return success
        end
        group Update Prepare Transfer State with transferState='accepted'
            TRANS_HANDLER -> TRANS_DAO: Request to update transfer
            TRANS_DAO <-> DB: Update transfer
            TRANS_DAO -> TRANS_HANDLER: return success
        end
        
        note right of TRANS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publishes Notifications event for Payer
        note right of TRANS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publishes Notifications event for Payee
    else Transfer Handler consume batch Messages
        TOPIC_TRANSFERS -> TRANS_HANDLER: Consumes Transfer event batch of messages for Payer

        group Persist batch Event Information
            POS_HANDLER -> EVENT_DAO: Request to persist event information for batch of messages
            EVENT_DAO <-> DB: Persist event batch information
            EVENT_DAO -> POS_HANDLER: return success
        end

        group Update Prepare batch Transfer State with transferState='accepted'
            TRANS_HANDLER -> TRANS_DAO: Request to update batch transfer
            TRANS_DAO <-> DB: Update batch transfer
            TRANS_DAO -> TRANS_HANDLER: return success
        end

        loop for each message in batch
            note right of TRANS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publishes Notifications event for Payer
            note right of TRANS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publishes Notifications event for Payee
        end
    end
    deactivate TRANS_HANDLER

    group Send notification for Payer
        activate NOTIFY_HANDLER
        alt Notifications Handler consume Single Message
            TOPIC_NOTIFICATIONS -> NOTIFY_HANDLER: Consumes Notifications event
            group Persist Event Information
                NOTIFY_HANDLER -> CSAPI: Requests to persist event information - POST - HTTP://events/
                CSAPI -> EVENT_DAO: Request to persist event information
                EVENT_DAO <-> DB: Persist event information
                EVENT_DAO -> CSAPI: return success
                CSAPI -> NOTIFY_HANDLER: return success
            end
            NOTIFY_HANDLER -> CSAPI: Requests Notification details for Payer - GET - HTTP://notifications/DFPS1
            CSAPI -> NOTIFY_DAO: Fetches Notifications details for Payer
            NOTIFY_DAO <-> DB: Fetches Notifications details for Payer
            NOTIFY_DAO -> CSAPI: Returns Notifications details for Payer
            CSAPI -> NOTIFY_HANDLER: Returns Notifications details for Payer
            NOTIFY_HANDLER -> DFSP1: HTTP Callback with Prepare result to Payer
        else Notifications Handler consume batch Messages
            TOPIC_NOTIFICATIONS -> NOTIFY_HANDLER: Consumes Notifications event batch of messages for Payer
            group Persist batch Event Information
                NOTIFY_HANDLER -> CSAPI: Requests to persist batch event information - POST - HTTP://events/
                CSAPI -> EVENT_DAO: Request to persist batch event information
                EVENT_DAO <-> DB: Persist event information
                EVENT_DAO -> CSAPI: return success
                CSAPI -> NOTIFY_HANDLER: return success
            end
            loop for each message in batch
                NOTIFY_HANDLER -> CSAPI: Requests Notification details for Payer - GET - HTTP://notifications/DFPS1
                CSAPI -> NOTIFY_DAO: Fetches Notifications details for Payer
                NOTIFY_DAO <-> DB: Fetches Notifications details for Payer
                NOTIFY_DAO -> CSAPI: Returns Notifications details for Payer
                CSAPI -> NOTIFY_HANDLER: Returns Notifications details for Payer
                NOTIFY_HANDLER -> DFSP1: HTTP Callback with Prepare result to Payer
            end
        end
        deactivate NOTIFY_HANDLER
    end

    group Send notification for Payee
        activate NOTIFY_HANDLER
        alt Notifications Handler consume Single Message
            TOPIC_NOTIFICATIONS -> NOTIFY_HANDLER: Consumes Notifications event
            group Persist Event Information
                NOTIFY_HANDLER -> CSAPI: Requests to persist event information - POST - HTTP://events/
                CSAPI -> EVENT_DAO: Request to persist event information
                EVENT_DAO <-> DB: Persist event information
                EVENT_DAO -> CSAPI: return success
                CSAPI -> NOTIFY_HANDLER: return success
            end
            NOTIFY_HANDLER -> CSAPI: Requests Notification details for Payee - GET - HTTP://notifications/DFPS1
            CSAPI -> NOTIFY_DAO: Fetches Notifications details for Payee
            NOTIFY_DAO <-> DB: Fetches Notifications details for Payee
            NOTIFY_DAO -> CSAPI: Returns Notifications details for Payee
            CSAPI -> NOTIFY_HANDLER: Returns Notifications details for Payee
            NOTIFY_HANDLER -> DFSP1: HTTP Callback with Prepare result to Payee
        else Notifications Handler consume batch Messages
            TOPIC_NOTIFICATIONS -> NOTIFY_HANDLER: Consumes Notifications event batch of messages for Payee
            group Persist batch Event Information
                NOTIFY_HANDLER -> CSAPI: Requests to persist batch event information - POST - HTTP://events/
                CSAPI -> EVENT_DAO: Request to persist batch event information
                EVENT_DAO <-> DB: Persist event information
                EVENT_DAO -> CSAPI: return success
                CSAPI -> NOTIFY_HANDLER: return success
            end
            loop for each message in batch
                NOTIFY_HANDLER -> CSAPI: Requests Notification details for Payee - GET - HTTP://notifications/DFPS1
                CSAPI -> NOTIFY_DAO: Fetches Notifications details for Payee
                NOTIFY_DAO <-> DB: Fetches Notifications details for Payee
                NOTIFY_DAO -> CSAPI: Returns Notifications details for Payee
                CSAPI -> NOTIFY_HANDLER: Returns Notifications details for Payee
                NOTIFY_HANDLER -> DFSP1: HTTP Callback with Prepare result to Payee
            end
        end
        deactivate NOTIFY_HANDLER
    end
end
@enduml
