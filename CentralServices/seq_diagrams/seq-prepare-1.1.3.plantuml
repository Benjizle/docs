@startuml
' declate title
title 1.1.3. Transfer Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Transfer-Topic" as TOPIC_TRANSFERS
control "Transfer Event Handler" as TRANS_HANDLER
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Event DAO" as EVENT_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_TRANSFERS
    participant TRANS_HANDLER
    participant TOPIC_NOTIFICATIONS
    participant EVENT_DAO
    participant DB
end box

' start flow
activate TRANS_HANDLER
group Transfer Handler Consume
    alt Consume Single Message
        TOPIC_TRANSFERS <- TRANS_HANDLER: Consume Transfer event

        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS

        group Persist Event Information
            TRANS_HANDLER -> EVENT_DAO: Request to persist event information
            activate EVENT_DAO
            EVENT_DAO -> DB: Persist event information
            activate DB
            deactivate DB
            EVENT_DAO --> TRANS_HANDLER: Return success
            deactivate EVENT_DAO
        end

        ' group Update Prepare Transfer State with transferState='RESERVED'
        '     TRANS_HANDLER -> TRANS_DAO: Request to update transfer
        '     TRANS_DAO <-> DB: Update transfer
        '     TRANS_DAO -> TRANS_HANDLER: Return success
        ' end
        
        note right of TRANS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notifications event for Payer
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS

        note right of TRANS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notifications event for Payee
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS

    else Consume Batch Messages
        TOPIC_TRANSFERS <- TRANS_HANDLER: Consume Transfer event batch of messages for Payer
        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS
        
        group Persist batch Event Information
            TRANS_HANDLER -> EVENT_DAO: Request to persist event information for batch of messages
            activate EVENT_DAO
            EVENT_DAO -> DB: Persist event batch information
            activate DB
            deactivate DB
            EVENT_DAO --> TRANS_HANDLER: Return success
            deactivate EVENT_DAO
        end

        ' group Update Prepare batch Transfer State with transferState='RESERVED'
        '     TRANS_HANDLER -> TRANS_DAO: Request to update batch transfer
        '     TRANS_DAO <-> DB: Update batch transfer
        '     TRANS_DAO -> TRANS_HANDLER: Return success
        ' end

        loop for each message in batch
            note right of TRANS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notifications event for Payer
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS

            note right of TRANS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notifications event for Payee
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS
        end
    end
end
deactivate TRANS_HANDLER
@enduml
