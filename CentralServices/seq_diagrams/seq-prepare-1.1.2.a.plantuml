@startuml
' declate title
title 1.1.2. Position Handler Consume (single message)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Position-Topic-dfsp1" as TOPIC_POSITION_DFSP1
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
entity "Position DAO" as POS_DAO
entity "Event-Topic" as TOPIC_EVENTS
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Transfer DAO" as TRANS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_POSITION_DFSP1
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    participant TRANS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Position Handler Consume
    TOPIC_POSITION_DFSP1 <- POS_HANDLER: Consume Position event message for Payer
    activate TOPIC_POSITION_DFSP1
    deactivate TOPIC_POSITION_DFSP1
    group Persist Event Information
        POS_HANDLER -> TOPIC_EVENTS: Request to persist event information
    end

    alt Calulate & Validate Latest Position (success)
        group Calculate position and persist change
            POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
            activate POS_DAO
            POS_DAO -> DB: Retrieve latest position from DB for Payer
            hnote over DB #lightyellow
                transferPosition
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return latest position
            deactivate POS_DAO

            POS_HANDLER <-> POS_HANDLER: Calculate latest position (lpos) for prepare
            POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
            
            POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
            activate POS_DAO
            POS_DAO -> DB: Persist latest position to DB for Payer
            hnote over DB #lightyellow
                transferPosition
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end

        group Persist Transfer State (with transferState='RESERVED' on position check pass)
            POS_HANDLER -> TRANS_DAO: Request to persist transfer
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist transfer state
            hnote over DB #lightyellow
                transferStateChange
            end note
            activate DB
            deactivate DB
            TRANS_DAO --> POS_HANDLER: Return success
            deactivate TRANS_DAO
        end

        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event
        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS
    else alt Calulate & Validate Latest Position (failure)
        group Calculate position and persist change
            POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
            activate POS_DAO
            POS_DAO -> DB: Retrieve latest position from DB for Payer
            hnote over DB #lightyellow
                transferPosition
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return latest position
            deactivate POS_DAO

            POS_HANDLER <-> POS_HANDLER: Calculate latest position (lpos) for prepare
            POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
            note right of POS_HANDLER #red: Validation failure!
        end
        
        group Persist Transfer State (with transferState='ABORTED' on position check pass)
            POS_HANDLER -> TRANS_DAO: Request to persist transfer
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist transfer state
            hnote over DB #lightyellow
                transferStateChange
            end note
            activate DB
            deactivate DB
            TRANS_DAO --> POS_HANDLER: Return success
            deactivate TRANS_DAO
        end

        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <ledgerName>,
                to: <transferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": 4001,
                            "errorDescription": "Payer FSP insufficient liquidity",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        status: {
                            type: functional
                            code: failure
                        }
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_NOTIFICATIONS: Publishes Notifications (failure) event for Payer
        deactivate POS_HANDLER
    end
end
deactivate POS_HANDLER
@enduml
