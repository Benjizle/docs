@startuml
' declate title
title 1.1.4. Send notification to Participant (Payer/Payee)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
actor "DFSP(n)\nParticipant" as DFSP
control "ML API Notification Event Handler" as NOTIFY_HANDLER
boundary "Central Service API" as CSAPI
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Event DAO" as EVENT_DAO
entity "Notification DAO" as NOTIFY_DAO
database "Central Store" as DB

box "Financial Service Provider" #lightGray
	participant DFSP
end box

box "ML API Adapter Service" #LightBlue
	participant NOTIFY_HANDLER
end box

box "Central Service" #LightYellow
    participant CSAPI
    participant TOPIC_NOTIFICATIONS
    participant EVENT_DAO
    participant NOTIFY_DAO
    participant DB
end box

' start flow
activate NOTIFY_HANDLER
group Send notification to Participant
    alt Consume Single Message
        TOPIC_NOTIFICATIONS <- NOTIFY_HANDLER: <color #FF0000>**Consume Notification event**</color>
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS

        group Persist Event Information
            NOTIFY_HANDLER -> CSAPI: Request to persist event information - POST - HTTP://events/
            activate CSAPI
            CSAPI -> EVENT_DAO: Request to persist event information
            activate EVENT_DAO
            EVENT_DAO -> DB: Persist event information
            activate DB
            deactivate DB
            EVENT_DAO --> CSAPI: Return success
            deactivate EVENT_DAO
            CSAPI --> NOTIFY_HANDLER: Return success
            deactivate CSAPI
        end
        NOTIFY_HANDLER -> CSAPI: Request Notification details for Participant - GET - HTTP://notifications/DFSP(n)
        activate CSAPI
        CSAPI -> NOTIFY_DAO: Fetch Notification details for Participant
        activate NOTIFY_DAO
        NOTIFY_DAO -> DB: Fetch Notification details for Participant
        activate DB
        deactivate DB
        NOTIFY_DAO --> CSAPI: Return Notification details for Participant
        deactivate NOTIFY_DAO
        CSAPI --> NOTIFY_HANDLER: Return Notification details for Participant
        deactivate CSAPI
        NOTIFY_HANDLER -> DFSP: HTTP Callback with Prepare result to Participant

    else Consume Batch Messages
        TOPIC_NOTIFICATIONS <- NOTIFY_HANDLER: <color #FF0000>**Consume Notifications event batch of messages for Participant**</color>
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
        group Persist batch Event Information
            NOTIFY_HANDLER -> CSAPI: Request to persist batch event information - POST - HTTP://events/
            activate CSAPI
            CSAPI -> EVENT_DAO: Request to persist batch event information
            activate EVENT_DAO
            EVENT_DAO -> DB: Persist event information
            activate DB
            deactivate DB
            EVENT_DAO --> CSAPI: Return success
            deactivate EVENT_DAO
            CSAPI --> NOTIFY_HANDLER: Return success
            deactivate CSAPI
        end
        loop for each message in batch
            NOTIFY_HANDLER -> CSAPI: Request Notifications details for Participant - GET - HTTP://notifications/DFPS(n)
            activate CSAPI
            CSAPI -> NOTIFY_DAO: Fetch Notifications details for Participant
            activate NOTIFY_DAO
            NOTIFY_DAO -> DB: Fetch Notifications details for Participant
            activate DB
            deactivate DB
            NOTIFY_DAO --> CSAPI: Return Notifications details for Participant
            deactivate NOTIFY_DAO
            CSAPI --> NOTIFY_HANDLER: Return Notifications details for Participant
            deactivate CSAPI
            NOTIFY_HANDLER -> DFSP: HTTP Callback with Prepare result to Participant
        end
    end
end
deactivate NOTIFY_HANDLER
@enduml
