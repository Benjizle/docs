@startuml
' declate title
title 1.2 DFSP1 sends a Prepare Transfer request to DFSP2 - Prepare Validation Failure

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
actor DFSP1
actor DFSP2
boundary "ML API Adapter" as MLAPI
control "ML API Notification Event Handler" as NOTIFY_HANDLER
boundary "Central Service API" as CSAPI
collections "Prepare-Topic-dfsp1" as TOPIC_PREPARE_DFSP1
control "Prepare Event Handler" as PREP_HANDLER
collections "Position-Topic-dfsp1" as TOPIC_POSITION_DFSP1
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
control "Transfer Event Handler" as TRANS_HANDLER
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
collections "Errors-Topic" as ERRORS_NOTIFICATIONS
entity "Position DAO" as POS_DAO
entity "Event DAO" as EVENT_DAO
entity "Transfer DAO" as TRANS_DAO
entity "Notification DAO" as NOTIFY_DAO
database "Central Store" as DB

box "Financial Service Providers" #LightGray
	participant DFSP1
	participant DFSP2
end box

box "ML API Adapter Service" #LightBlue
	participant MLAPI
	participant NOTIFY_HANDLER
end box

box "Central Service" #LightYellow
    participant CSAPI
	participant TOPIC_PREPARE_DFSP1
    participant PREP_HANDLER
    participant TOPIC_POSITION_DFSP1
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TRANS_HANDLER
    participant TOPIC_NOTIFICATIONS
    participant ERRORS_NOTIFICATIONS
    participant POS_DAO
    participant EVENT_DAO
    participant TRANS_DAO
    participant NOTIFY_DAO
    participant DB
end box

' start flow
alt Prepare Validation Failure
    activate MLAPI
    note right of DFSP1 #yellow
        Headers - transferHeaders: {
            Content-Length: <Content-Length>,
            Content-Type: <Content-Type>,
            Date: <Date>,
            X-Forwarded-For: <X-Forwarded-For>,
            FSPIOP-Source: <FSPIOP-Source>,
            FSPIOP-Destination: <FSPIOP-Destination>,
            FSPIOP-Encryption: <FSPIOP-Encryption>,
            FSPIOP-Signature: <FSPIOP-Signature>,
            FSPIOP-URI: <FSPIOP-URI>,
            FSPIOP-HTTP-Method: <FSPIOP-HTTP-Method>
        }

        Payload - transferMessage:
        {
            "transferId": <uuid>,
            "payeeFsp": dfsp1,
            "payerFsp": dfsp1,
            "amount": {
                "currency": "AED",
                "amount": "string"
            },
            "ilpPacket": "string",
            "condition": "string",
            "expiration": "string",
            "extensionList": {
                "extension": [
                    {
                        "key": "string",
                        "value": "string"
                    }
                ]
            }
        }
    end note
    DFSP1 -> MLAPI: POST - http://transfers
    note right of MLAPI #yellow
        Message:
        {
            id: <transferMessage.transferId>
            from: <transferMessage.payerFsp>,
            to: <transferMessage.payeeFsp>,
            type: application/json
            content: {
                headers: <transferHeaders>,
                payload: <transferMessage>
            },
            metadata: {
                event: {
                    id: <uuid>,
                    type: prepare,
                    action: prepare,
                    createdAt: <timestamp>,
                    state: {
                        status: "success"
                        code: 0
                    }
                }
            }
        }
    end note
    MLAPI -> TOPIC_PREPARE_DFSP1: Routes & Publishes Prepare event for Payer
    TOPIC_PREPARE_DFSP1 <-> TOPIC_PREPARE_DFSP1: Ensures that event is replicated as configured (ACKS=all)
    TOPIC_PREPARE_DFSP1 -> MLAPI: Responds replication acknoledgements have been received
    MLAPI -> DFSP1: Respond HTTP - 202 (Accepted)
    deactivate MLAPI

    activate PREP_HANDLER
    TOPIC_PREPARE_DFSP1 -> PREP_HANDLER: Consumes Prepare event message for Payer
    alt Validate Prepare Transfer
        PREP_HANDLER <-> PREP_HANDLER: Request to persist event information (refer to 1.1 for detail)
        PREP_HANDLER <-> PREP_HANDLER: Validates from - Payer (refer to 1.1 for detail)
        PREP_HANDLER <-> PREP_HANDLER: Validates to - Payee (refer to 1.1 for detail)
        PREP_HANDLER <-> PREP_HANDLER: Validates duplicate Check (refer to 1.1 for detail)
        PREP_HANDLER <-> PREP_HANDLER: Validates crypto-condition (refer to 1.1 for detail)
        PREP_HANDLER <-> PREP_HANDLER: Validates message signature (to be confirmed in future requirement) (refer to 1.1 for detail)
    end
    note right of PREP_HANDLER #red: Validation failure!
    ' PREP_HANDLER -> EVENT_DAO: Request to persist event information
    ' EVENT_DAO <-> DB: Persist event information
    ' EVENT_DAO -> PREP_HANDLER: return success
    note right of PREP_HANDLER #yellow
        Message:
        {
            id: <transferMessage.transferId>
            from: <ledgerName>,
            to: <transferMessage.payerFsp>,
            type: application/json
            content: {
                headers: <transferHeaders>,
                payload: {
                    "errorInformation": {
                        "errorCode": <possible codes: [3100, 3105, 3106, 3201, 3202, 3203, 3300, 3301]>
                        "errorDescription": "<refer to section 35.1.3 for description>",
                        "extensionList": <transferMessage.extensionList>
                }
            },
            metadata: {
                event: {
                    id: <uuid>,
                    responseTo: <previous.uuid>,
                    type: notification,
                    action: prepare,
                    createdAt: <timestamp>,
                    status: {
                        type: functional
                        code: failure
                    }
                    state: {
                        status: 'error',
                        code: <errorInformation.errorCode>
                        description: <errorInformation.errorDescription>
                    }
                }
            }
        }
    end note
    PREP_HANDLER -> TOPIC_NOTIFICATIONS: Publishes Notification (failure) event for Payer
    PREP_HANDLER -> ERRORS_NOTIFICATIONS: Publishes Notification (failure) event for Payer (handled by seperate process)
    deactivate PREP_HANDLER

    alt Send notification for Payer
        activate NOTIFY_HANDLER
        TOPIC_NOTIFICATIONS -> NOTIFY_HANDLER: Consumes Notifications event
        alt Persist Event Information
            NOTIFY_HANDLER -> CSAPI: Requests to persist event information - POST - HTTP://events/
            CSAPI -> EVENT_DAO: Request to persist event information
            EVENT_DAO <-> DB: Persist event information
            EVENT_DAO -> CSAPI: return success
            CSAPI -> NOTIFY_HANDLER: return success
        end
        NOTIFY_HANDLER -> CSAPI: Requests Notification details for Payer - GET - HTTP://notifications/DFPS1
        CSAPI -> NOTIFY_DAO: Fetches Notifications details for Payer
        NOTIFY_DAO <-> DB: Fetches Notifications details for Payer
        NOTIFY_DAO -> CSAPI: Returns Notifications details for Payer
        CSAPI -> NOTIFY_HANDLER: Returns Notifications details for Payer
        NOTIFY_HANDLER -> DFSP1: HTTP Callback with Prepare result to Payer
        deactivate NOTIFY_HANDLER
    end
end
@enduml
